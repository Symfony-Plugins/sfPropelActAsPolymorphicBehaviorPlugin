The `sfPropelActAsPolymorphicBehaviorPlugin` provides support for polymorphic keys in Propel objects. This plugin can be used to store data that each reference a record from any number of tables. For example, you could create one `comments` table that uses a polymorphic key to reference both the table and the primary key of the foreign record. The example below demonstrates this.

Features
--------

 * Easily accesses foreign records based on two-column foreign keys
 * Works alongside Propel's native support for [single table inheritance](http://propel.phpdb.org/trac/wiki/Users/Documentation/1.2/Schema#columnelement)

Installation
------------

Enable behaviors in `propel.ini`

    propel.builder.addBehaviors = true

Rebuild your model

    ./symfony propel-build-model

Add the behavior to one of your model classes

    [php]
    class Post extends BasePost
    {
    }

    $hasOneKeys  = array('author'   => array('foreign_model' => PostPeer::AUTHOR_TYPE,
                                             'foreign_pk'    => PostPeer::AUTHOR_ID));
    $hasManyKeys = array('comments' => array('foreign_model' => CommentPeer::SUBJECT_TYPE,
                                             'foreign_pk'    => CommentPeer::SUBJECT_ID));
    sfPropelBehavior::add('Post', array('sfPropelActAsPolymorphic' => array('has_one'  => $hasOneKeys,
                                                                            'has_many' => $hasManyKeys)));
    sfPropelActAsPolymorphicBehavior::mixinCustomMethods('Post');

Usage
-----

The call to `sfPropelBehavior::add()` adds the following methods to your class:

 * `getPolymorphicHasOneReference(string $keyName[, Connection $con])`
 * `setPolymorphicHasOneReference(string $keyName, mixed $foreignObject)`
 * `getPolymorphicHasManyReferences(string $keyName[, Criteria $c[, Connection $con]])`
 * `addPolymorphicHasManyReference(string $keyName, BaseObject $foreignObject)`
 * `countPolymorphicHasManyReferences(string $keyName[, Criteria $c[, bool $distinct[, Connection $con]]])`

Furthermore, calling `sfPropelActAsPolymorphicBehavior::mixinCustomMethods()` adds a number of custom-named methods to your class, based on the names of your polymorphic keys. 

For example, the `has_one` key `author`, above, would be accessible with the following methods:

 * `getAuthor([Connection $con])`
 * `setAuthor(mixed $foreignObject)`

The `has_many` key `comments`, above, would be accessible with the following methods:

 * `getComments([Criteria $c[, Connection $con]])`
 * `addComments(BaseObject $foreignObject)`
   **This method functions more like an `addComment()` method, but the plugin does not remove that last "s" from your key's name.**
 * `countComments([Criteria $c[, bool $distinct[, Connection $con]]])`

Loading fixture data
--------------------

The standard pake task for loading data from YML fixtures, `propel-load-data`, will not create polymorphic relationships. This plugin includes its own pake task, `propel-load-pm-data`, which will allow you to create polymorphic relationships from YML fixtures in the following way:

    Business:
      kwik:
        name: Kwik E Mart

    User:
      joe:
        name: Joe Bob

    Post:
      post_by_user:
        title: Hello world
        author: User_joe            # <-- class + underscore + label
      post_by_business:
        title: Hello free market
        author: Business_kwik       # <-- class + underscore + label

Notice the polymorphic reference includes the foreign Propel class name first, then an underscore, then the nickname assigned to the foreign object in your fixture file.

Limitations
-----------

 * Does not support multicolumn primary keys

Roadmap
-------

 * Support for `onDelete=cascade` and `onDelete=set null`
 * Better compatibility with `sfPropelAlternativeSchemaPlugin`
 * Complete test suite
 * Support symfony 1.1

Changelog
---------

### 0.8.0-DEV

 * Progress toward symfony 1.1 compatibility
 * Migrated `README` to Markdown for new plugins system

### 0.7.0-BETA

 * Updated plugin to more strictly follow the behavior of Propel's native support of foreign keys in model classes
   * Implemented `sfParameterHolder` to reduce the number of queries to the database per request and support passing new objects to `setXXX()` and `addXXX()` methods
   * **Breaks BC:** Removed `clearXXX()` and `deleteXXX()` methods since they don't exist in Propel's native support of foreign keys. Please use the 0.6.0-alpha version if you need these methods
 * Updated `propel-load-pm-data` task to work if custom methods have not been mixed in
 * Upgraded plugin to beta status

### 0.0.6-ALPHA

 * Bugfix to internal stack of custom mixed-in methods

### 0.0.5-ALPHA

 * Minor bugfix to `propel-load-pm-data`

### 0.0.4-ALPHA

 * Added pake task, `propel-load-pm-data` for loading data from fixtures in a way that respects polymorphic keys

### 0.0.3-ALPHA

 * Added support for `has_many` relationships
 * Added custom-named methods that can optionally be mixed in

### 0.0.1-ALPHA

 * Unit tests not in place.
 * PEAR package not in place.
 * Supports only m-to-1 relationships.
 * Foreign objects must be saved before being passed to `setPolymorphicHasOneReference`.
